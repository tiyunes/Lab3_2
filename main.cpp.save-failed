#include <iostream>
#include <utility>
#include <exception>
#include <string>
#include <fstream>
#include "dictionary.h"
#include "STUDENTS.H"
#include "histogram.h"
#include "benchmark.h"
#include "ArraySequence.h"
#include "SortedSequence.h"
#include "SFS.h"
#include "ISorter.h"
#include "sparse_matrix.h"
#include "sparse_vector.h"
#include "BTree.h"
#include "BTree_node.h"
#include "tests.h"
#include "gnuplot.h"

using namespace std;


bool comp2(int a, int b)
{
    if(a < b)
    {
        return 1;
    }
    else return 0;
}

function<bool(int, int)>compInt2 = comp2;

int main()
{
    pair<int, int> p0;
    p0.first = 0;
    p0.second = 0;
    TPair<int, int> pair0(p0);
    TPair<int, int> l0(p0);

    pair<int, int> p1;
    p1.first = 11;
    p1.second = 12;
    TPair<int, int> pair1(p1);
    TPair<int, int> l1(p1);

    pair<int, int> p2;
    p2.first = 4;
    p2.second = 1;
    TPair<int, int> pair2(p2);
    TPair<int, int> l2(p2);

    pair<int, int> p3;
    p3.first = 1;
    p3.second = 10;
    TPair<int, int> pair3(p3);
    TPair<int, int> l3(p3);

    vector<int>* v = new vector<int>;
    v->push_back(4);
    v->push_back(0);
    v->push_back(3);
    SparseVector<int>* sparseVector = new SparseVector<int>(v, 0, cmpKey);
    cout << sparseVector->GetD(1) << endl;

    vector<TPair<int, TPair<int, int>>>* vPair = new vector<TPair<int, TPair<int, int>>>;
    pair<int, TPair<int, int>> p4;
    p4.second = l1;
    p4.first = 2;
    TPair<int, TPair<int, int>> pair4(p4);

    pair<int, TPair<int, int>> p5;
    p5.second = l2;
    p5.first = 3;
    TPair<int, TPair<int, int>> pair5(p5);

    pair<int, TPair<int, int>> p6;
    p6.second = l3;
    p6.first = 7;
    TPair<int, TPair<int, int>> pair6(p6);

    vPair->push_back(pair4);
    vPair->push_back(pair5);
    vPair->push_back(pair6);

    int var = 0;
    while (var != 5)
    {
        cout << "Choose the option: " << endl;
        cout << "1. Histogram " << endl << "2. Sparse vector" << endl
        << "3. Sparse matrix" << endl << "4. Search frequent subsequences" << endl
        << "5. Exit" << endl;
        cin >> var;
        cout << endl;
        switch (var)
        {
        case 1:
            {
                int length = 0;
                cout << "Choose the number of students" << endl;
                cin >> length;
                Sequence<Student>* sStudent = new ArraySequence<Student>();
                for (int i = 0; i < length; i++)
                {
                    int number, series;
                    cout << "Enter the number and series of an ID of " << i << " student" << endl;
                    cin >> number >> series;
                    StudentID* id = new StudentID(number, series);

                    string firstName, lastName;
                    cout << "Enter the first name and second of " << i << " student" << endl;
                    cin >> firstName >> lastName;
                    string* firstName1 = new string(firstName);
                    string* lastName1 = new string(lastName);

                    int age;
                    cout  << "Enter the age of " << i << " student" << endl;
                    cin >> age;

                    int grade;
                    cout << "Enter the grade of " << i << " student" << endl;
                    cin >> grade;

                    Student student(id, age, grade, firstName1, lastName1);
                    sStudent->Append(student);
                }
                int N;
                cout << "Choose the amount of parts: " << endl;
                cin >> N;
                cout << "The parameter of partition: " << endl;
                int j;
                cout << "Choose the parameter of partition: " << endl;
                cout << "1. Number of ID " << endl << "2. Age" << endl
                << "3. Grade" << endl;
                cin >> j;
                switch (j)
                {
                case 1:
                    {
                        int (Student::*GetP)() = Student::GetNumber;
                        Histogram<int, int>* h = new Histogram<int, int>(sStudent, N, cmpKey, GetP);
                        ofstream fout("histogram_data.txt");
                        for (int i = 1; i <= h->GetSize(); i++)
                        {
                            fout << i << h->GetSubAmount(i) << endl;
                        }
                        gnuplot p;
                        p("set encoding utf8");
                        p("set terminal windows");
                        p("set output \"plot3.png\" ");
                        p("set title Histogram");
                        p("min = 0");
                        p("max = N");
                        p("set yrange = [h->GetMin(), h->GetMax()]");
                        p("width = (max - min) / N");
                        p("hist(x,width)=width*floor(x/width)+width/2.0");
                        p("")
                    }
                case 2:
                    {
                        int (Student::*GetP)() = Student::GetAge;
                        Histogram<int, int>* h = new Histogram<int, int>(sStudent, N, cmpKey, GetP);
                        ofstream fout("histogram_data.txt");
                        for (int i = 1; i <= h->GetSize(); i++)
                        {
                            fout << i << h->GetSubAmount(i) << endl;
                        }
                        gnuplot p;
                        p("set encoding utf8");
                        p("set terminal windows");
                        p("set output \"plot3.png\" ");
                        //p("set title "Histogram"");
                    }
                case 3:
                    {
                        int (Student::*GetP)() = Student::GetGrade;
                        Histogram<int, int>* h = new Histogram<int, int>(sStudent, N, cmpKey, GetP);
                        ofstream fout("histogram_data.txt");
                        for (int i = 1; i <= h->GetSize(); i++)
                        {
                            fout << i << h->GetSubAmount(i) << endl;
                        }
                        gnuplot p;
                        p("set encoding utf8");
                        p("set terminal windows");
                        p("set output \"plot3.png\" ");
                        //p("set title "Histogram"");
                    }
                }
            }
        }
    }

    TimeVector(v, cmpKey, sorter2);
    TimeMatrix(vPair, 1, 3, 0, compMatrix);
    TestSFS();
    TestSparseVector();
    TestSparseMatrix();
    TestHistogram();
    return 0;
}
